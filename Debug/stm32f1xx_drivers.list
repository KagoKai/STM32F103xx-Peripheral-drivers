
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ba0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cd0  08000cd0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cd0  08000cd0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000cd0  08000cd0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cd0  08000cd0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cd0  08000cd0  00010cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cd4  08000cd4  00010cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000cd8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000004  08000cdc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000cdc  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000110d  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003f9  00000000  00000000  0002117d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000148  00000000  00000000  00021578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000ee  00000000  00000000  000216c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000027ce  00000000  00000000  000217ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000019fa  00000000  00000000  00023f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009c95  00000000  00000000  00025976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000494  00000000  00000000  0002f60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0002faa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000cb8 	.word	0x08000cb8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000cb8 	.word	0x08000cb8

08000170 <GPIOx_ClkControl>:
#include "stm32f1xx_gpio.h"

/********** Port clock control **********/

void GPIOx_ClkControl(GPIOx_Reg_t *pGPIOx, uint8_t enableState)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	460b      	mov	r3, r1
 800017a:	70fb      	strb	r3, [r7, #3]
	if (enableState == ENABLE)
 800017c:	78fb      	ldrb	r3, [r7, #3]
 800017e:	2b01      	cmp	r3, #1
 8000180:	d136      	bne.n	80001f0 <GPIOx_ClkControl+0x80>
	{
		if (pGPIOx == GPIOA)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a39      	ldr	r2, [pc, #228]	; (800026c <GPIOx_ClkControl+0xfc>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d106      	bne.n	8000198 <GPIOx_ClkControl+0x28>
		{
			GPIOA_CLK_EN();
 800018a:	4b39      	ldr	r3, [pc, #228]	; (8000270 <GPIOx_ClkControl+0x100>)
 800018c:	699b      	ldr	r3, [r3, #24]
 800018e:	4a38      	ldr	r2, [pc, #224]	; (8000270 <GPIOx_ClkControl+0x100>)
 8000190:	f043 0304 	orr.w	r3, r3, #4
 8000194:	6193      	str	r3, [r2, #24]
		else if (pGPIOx == GPIOE)
		{
			GPIOE_CLK_DI();
		}
	}
}
 8000196:	e064      	b.n	8000262 <GPIOx_ClkControl+0xf2>
		else if (pGPIOx == GPIOB)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	4a36      	ldr	r2, [pc, #216]	; (8000274 <GPIOx_ClkControl+0x104>)
 800019c:	4293      	cmp	r3, r2
 800019e:	d106      	bne.n	80001ae <GPIOx_ClkControl+0x3e>
			GPIOB_CLK_EN();
 80001a0:	4b33      	ldr	r3, [pc, #204]	; (8000270 <GPIOx_ClkControl+0x100>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a32      	ldr	r2, [pc, #200]	; (8000270 <GPIOx_ClkControl+0x100>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
}
 80001ac:	e059      	b.n	8000262 <GPIOx_ClkControl+0xf2>
		else if (pGPIOx == GPIOC)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4a31      	ldr	r2, [pc, #196]	; (8000278 <GPIOx_ClkControl+0x108>)
 80001b2:	4293      	cmp	r3, r2
 80001b4:	d106      	bne.n	80001c4 <GPIOx_ClkControl+0x54>
			GPIOC_CLK_EN();
 80001b6:	4b2e      	ldr	r3, [pc, #184]	; (8000270 <GPIOx_ClkControl+0x100>)
 80001b8:	699b      	ldr	r3, [r3, #24]
 80001ba:	4a2d      	ldr	r2, [pc, #180]	; (8000270 <GPIOx_ClkControl+0x100>)
 80001bc:	f043 0310 	orr.w	r3, r3, #16
 80001c0:	6193      	str	r3, [r2, #24]
}
 80001c2:	e04e      	b.n	8000262 <GPIOx_ClkControl+0xf2>
		else if (pGPIOx == GPIOD)
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	4a2d      	ldr	r2, [pc, #180]	; (800027c <GPIOx_ClkControl+0x10c>)
 80001c8:	4293      	cmp	r3, r2
 80001ca:	d106      	bne.n	80001da <GPIOx_ClkControl+0x6a>
			GPIOD_CLK_EN();
 80001cc:	4b28      	ldr	r3, [pc, #160]	; (8000270 <GPIOx_ClkControl+0x100>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a27      	ldr	r2, [pc, #156]	; (8000270 <GPIOx_ClkControl+0x100>)
 80001d2:	f043 0320 	orr.w	r3, r3, #32
 80001d6:	6193      	str	r3, [r2, #24]
}
 80001d8:	e043      	b.n	8000262 <GPIOx_ClkControl+0xf2>
		else if (pGPIOx == GPIOE)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a28      	ldr	r2, [pc, #160]	; (8000280 <GPIOx_ClkControl+0x110>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d13f      	bne.n	8000262 <GPIOx_ClkControl+0xf2>
			GPIOE_CLK_EN();
 80001e2:	4b23      	ldr	r3, [pc, #140]	; (8000270 <GPIOx_ClkControl+0x100>)
 80001e4:	699b      	ldr	r3, [r3, #24]
 80001e6:	4a22      	ldr	r2, [pc, #136]	; (8000270 <GPIOx_ClkControl+0x100>)
 80001e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001ec:	6193      	str	r3, [r2, #24]
}
 80001ee:	e038      	b.n	8000262 <GPIOx_ClkControl+0xf2>
	else if (enableState == DISABLE)
 80001f0:	78fb      	ldrb	r3, [r7, #3]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d135      	bne.n	8000262 <GPIOx_ClkControl+0xf2>
		if (pGPIOx == GPIOA)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4a1c      	ldr	r2, [pc, #112]	; (800026c <GPIOx_ClkControl+0xfc>)
 80001fa:	4293      	cmp	r3, r2
 80001fc:	d106      	bne.n	800020c <GPIOx_ClkControl+0x9c>
			GPIOA_CLK_DI();
 80001fe:	4b1c      	ldr	r3, [pc, #112]	; (8000270 <GPIOx_ClkControl+0x100>)
 8000200:	699b      	ldr	r3, [r3, #24]
 8000202:	4a1b      	ldr	r2, [pc, #108]	; (8000270 <GPIOx_ClkControl+0x100>)
 8000204:	f023 0304 	bic.w	r3, r3, #4
 8000208:	6193      	str	r3, [r2, #24]
}
 800020a:	e02a      	b.n	8000262 <GPIOx_ClkControl+0xf2>
		else if (pGPIOx == GPIOB)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4a19      	ldr	r2, [pc, #100]	; (8000274 <GPIOx_ClkControl+0x104>)
 8000210:	4293      	cmp	r3, r2
 8000212:	d106      	bne.n	8000222 <GPIOx_ClkControl+0xb2>
			GPIOB_CLK_DI();
 8000214:	4b16      	ldr	r3, [pc, #88]	; (8000270 <GPIOx_ClkControl+0x100>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	4a15      	ldr	r2, [pc, #84]	; (8000270 <GPIOx_ClkControl+0x100>)
 800021a:	f023 0308 	bic.w	r3, r3, #8
 800021e:	6193      	str	r3, [r2, #24]
}
 8000220:	e01f      	b.n	8000262 <GPIOx_ClkControl+0xf2>
		else if (pGPIOx == GPIOC)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	4a14      	ldr	r2, [pc, #80]	; (8000278 <GPIOx_ClkControl+0x108>)
 8000226:	4293      	cmp	r3, r2
 8000228:	d106      	bne.n	8000238 <GPIOx_ClkControl+0xc8>
			GPIOC_CLK_DI();
 800022a:	4b11      	ldr	r3, [pc, #68]	; (8000270 <GPIOx_ClkControl+0x100>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a10      	ldr	r2, [pc, #64]	; (8000270 <GPIOx_ClkControl+0x100>)
 8000230:	f023 0310 	bic.w	r3, r3, #16
 8000234:	6193      	str	r3, [r2, #24]
}
 8000236:	e014      	b.n	8000262 <GPIOx_ClkControl+0xf2>
		else if (pGPIOx == GPIOD)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4a10      	ldr	r2, [pc, #64]	; (800027c <GPIOx_ClkControl+0x10c>)
 800023c:	4293      	cmp	r3, r2
 800023e:	d106      	bne.n	800024e <GPIOx_ClkControl+0xde>
			GPIOD_CLK_DI();
 8000240:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <GPIOx_ClkControl+0x100>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	4a0a      	ldr	r2, [pc, #40]	; (8000270 <GPIOx_ClkControl+0x100>)
 8000246:	f023 0320 	bic.w	r3, r3, #32
 800024a:	6193      	str	r3, [r2, #24]
}
 800024c:	e009      	b.n	8000262 <GPIOx_ClkControl+0xf2>
		else if (pGPIOx == GPIOE)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <GPIOx_ClkControl+0x110>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d105      	bne.n	8000262 <GPIOx_ClkControl+0xf2>
			GPIOE_CLK_DI();
 8000256:	4b06      	ldr	r3, [pc, #24]	; (8000270 <GPIOx_ClkControl+0x100>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	4a05      	ldr	r2, [pc, #20]	; (8000270 <GPIOx_ClkControl+0x100>)
 800025c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000260:	6193      	str	r3, [r2, #24]
}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	40010800 	.word	0x40010800
 8000270:	40021000 	.word	0x40021000
 8000274:	40010c00 	.word	0x40010c00
 8000278:	40011000 	.word	0x40011000
 800027c:	40011400 	.word	0x40011400
 8000280:	40011800 	.word	0x40011800

08000284 <GPIOx_Init>:


/********** Port init and deinit **********/

void GPIOx_Init(GPIOx_Handle_t *pGPIOx_Handle)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b08a      	sub	sp, #40	; 0x28
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	uint8_t MODE = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t CNF = 0;
 8000292:	2300      	movs	r3, #0
 8000294:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	uint8_t position = pGPIOx_Handle->GPIO_pinConfig.GPIO_PinNum;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	791b      	ldrb	r3, [r3, #4]
 800029c:	77fb      	strb	r3, [r7, #31]
	uint8_t configOffset = (position < PIN_8) ? (position * 4) : ((position - 8) * 4);
 800029e:	7ffb      	ldrb	r3, [r7, #31]
 80002a0:	2b07      	cmp	r3, #7
 80002a2:	d803      	bhi.n	80002ac <GPIOx_Init+0x28>
 80002a4:	7ffb      	ldrb	r3, [r7, #31]
 80002a6:	009b      	lsls	r3, r3, #2
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	e004      	b.n	80002b6 <GPIOx_Init+0x32>
 80002ac:	7ffb      	ldrb	r3, [r7, #31]
 80002ae:	3b08      	subs	r3, #8
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	77bb      	strb	r3, [r7, #30]

	switch (pGPIOx_Handle->GPIO_pinConfig.GPIO_PinMode)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	795b      	ldrb	r3, [r3, #5]
 80002bc:	2b08      	cmp	r3, #8
 80002be:	d871      	bhi.n	80003a4 <GPIOx_Init+0x120>
 80002c0:	a201      	add	r2, pc, #4	; (adr r2, 80002c8 <GPIOx_Init+0x44>)
 80002c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c6:	bf00      	nop
 80002c8:	0800032d 	.word	0x0800032d
 80002cc:	080002ed 	.word	0x080002ed
 80002d0:	080002fd 	.word	0x080002fd
 80002d4:	08000395 	.word	0x08000395
 80002d8:	0800030d 	.word	0x0800030d
 80002dc:	0800031d 	.word	0x0800031d
 80002e0:	0800032d 	.word	0x0800032d
 80002e4:	0800032d 	.word	0x0800032d
 80002e8:	0800032d 	.word	0x0800032d
	{
		case GPIO_MODE_OUTPUT_PP:
			MODE = pGPIOx_Handle->GPIO_pinConfig.GPIO_PinSpeed;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	799b      	ldrb	r3, [r3, #6]
 80002f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			CNF = GPIO_CR_CNF_GP_OUTPUT_PP;
 80002f4:	2300      	movs	r3, #0
 80002f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
 80002fa:	e053      	b.n	80003a4 <GPIOx_Init+0x120>
		case GPIO_MODE_OUTPUT_OD:
			MODE = pGPIOx_Handle->GPIO_pinConfig.GPIO_PinSpeed;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	799b      	ldrb	r3, [r3, #6]
 8000300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			CNF = GPIO_CR_CNF_GP_OUTPUT_OD;
 8000304:	2301      	movs	r3, #1
 8000306:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
 800030a:	e04b      	b.n	80003a4 <GPIOx_Init+0x120>
		case GPIO_MODE_AF_OP_PP:
			MODE = pGPIOx_Handle->GPIO_pinConfig.GPIO_PinSpeed;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	799b      	ldrb	r3, [r3, #6]
 8000310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			CNF = GPIO_CR_CNF_AF_OUTPUT_PP;
 8000314:	2302      	movs	r3, #2
 8000316:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
 800031a:	e043      	b.n	80003a4 <GPIOx_Init+0x120>
		case GPIO_MODE_AF_OP_OD:
			MODE = pGPIOx_Handle->GPIO_pinConfig.GPIO_PinSpeed;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	799b      	ldrb	r3, [r3, #6]
 8000320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			CNF = GPIO_CR_CNF_AF_OUTPUT_OD;
 8000324:	2303      	movs	r3, #3
 8000326:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
 800032a:	e03b      	b.n	80003a4 <GPIOx_Init+0x120>
		case GPIO_MODE_IT_RT:
		case GPIO_MODE_IT_FT:
		case GPIO_MODE_IT_RFT:
		case GPIO_MODE_INPUT:
			MODE = GPIO_CR_MODE_INPUT;
 800032c:	2300      	movs	r3, #0
 800032e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch (pGPIOx_Handle->GPIO_pinConfig.GPIO_PinPull)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	79db      	ldrb	r3, [r3, #7]
 8000336:	2b02      	cmp	r3, #2
 8000338:	d01a      	beq.n	8000370 <GPIOx_Init+0xec>
 800033a:	2b02      	cmp	r3, #2
 800033c:	dc31      	bgt.n	80003a2 <GPIOx_Init+0x11e>
 800033e:	2b00      	cmp	r3, #0
 8000340:	d002      	beq.n	8000348 <GPIOx_Init+0xc4>
 8000342:	2b01      	cmp	r3, #1
 8000344:	d004      	beq.n	8000350 <GPIOx_Init+0xcc>
				case GPIO_PULLDOWN:
					CNF = GPIO_CR_CNF_INPUT_PU_PD;
					pGPIOx_Handle->pGPIOx->ODR &= ~(1 << position);
					break;
			}
			break;
 8000346:	e02c      	b.n	80003a2 <GPIOx_Init+0x11e>
					CNF = GPIO_CR_CNF_INPUT_FLOATING;
 8000348:	2301      	movs	r3, #1
 800034a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					break;
 800034e:	e020      	b.n	8000392 <GPIOx_Init+0x10e>
					CNF = GPIO_CR_CNF_INPUT_PU_PD;
 8000350:	2302      	movs	r3, #2
 8000352:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					pGPIOx_Handle->pGPIOx->ODR |= (1 << position);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	68da      	ldr	r2, [r3, #12]
 800035c:	7ffb      	ldrb	r3, [r7, #31]
 800035e:	2101      	movs	r1, #1
 8000360:	fa01 f303 	lsl.w	r3, r1, r3
 8000364:	4619      	mov	r1, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	430a      	orrs	r2, r1
 800036c:	60da      	str	r2, [r3, #12]
					break;
 800036e:	e010      	b.n	8000392 <GPIOx_Init+0x10e>
					CNF = GPIO_CR_CNF_INPUT_PU_PD;
 8000370:	2302      	movs	r3, #2
 8000372:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					pGPIOx_Handle->pGPIOx->ODR &= ~(1 << position);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	68da      	ldr	r2, [r3, #12]
 800037c:	7ffb      	ldrb	r3, [r7, #31]
 800037e:	2101      	movs	r1, #1
 8000380:	fa01 f303 	lsl.w	r3, r1, r3
 8000384:	43db      	mvns	r3, r3
 8000386:	4619      	mov	r1, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	400a      	ands	r2, r1
 800038e:	60da      	str	r2, [r3, #12]
					break;
 8000390:	bf00      	nop
			break;
 8000392:	e006      	b.n	80003a2 <GPIOx_Init+0x11e>
		case GPIO_MODE_ANALOG:
			MODE = GPIO_CR_MODE_INPUT;
 8000394:	2300      	movs	r3, #0
 8000396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			CNF = GPIO_CR_CNF_ANALOG;
 800039a:	2300      	movs	r3, #0
 800039c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
 80003a0:	e000      	b.n	80003a4 <GPIOx_Init+0x120>
			break;
 80003a2:	bf00      	nop
	}

	// Extra configuration for Interrupt modes (on the peripheral side).
	if (GPIOx_IsEXTI(pGPIOx_Handle->GPIO_pinConfig.GPIO_PinMode))
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	795b      	ldrb	r3, [r3, #5]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 f909 	bl	80005c0 <GPIOx_IsEXTI>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	f000 80c5 	beq.w	8000540 <GPIOx_Init+0x2bc>
	{
		// Step 1: Select trigger edge.
		if (pGPIOx_Handle->GPIO_pinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	795b      	ldrb	r3, [r3, #5]
 80003ba:	2b06      	cmp	r3, #6
 80003bc:	d115      	bne.n	80003ea <GPIOx_Init+0x166>
		{
			SET_BIT(EXTI->RTSR, position);
 80003be:	4b73      	ldr	r3, [pc, #460]	; (800058c <GPIOx_Init+0x308>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	7ffa      	ldrb	r2, [r7, #31]
 80003c4:	2101      	movs	r1, #1
 80003c6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ca:	4611      	mov	r1, r2
 80003cc:	4a6f      	ldr	r2, [pc, #444]	; (800058c <GPIOx_Init+0x308>)
 80003ce:	430b      	orrs	r3, r1
 80003d0:	6093      	str	r3, [r2, #8]
			CLEAR_BIT(EXTI->FTSR, position);
 80003d2:	4b6e      	ldr	r3, [pc, #440]	; (800058c <GPIOx_Init+0x308>)
 80003d4:	68db      	ldr	r3, [r3, #12]
 80003d6:	7ffa      	ldrb	r2, [r7, #31]
 80003d8:	2101      	movs	r1, #1
 80003da:	fa01 f202 	lsl.w	r2, r1, r2
 80003de:	43d2      	mvns	r2, r2
 80003e0:	4611      	mov	r1, r2
 80003e2:	4a6a      	ldr	r2, [pc, #424]	; (800058c <GPIOx_Init+0x308>)
 80003e4:	400b      	ands	r3, r1
 80003e6:	60d3      	str	r3, [r2, #12]
 80003e8:	e031      	b.n	800044e <GPIOx_Init+0x1ca>
		}
		else if (pGPIOx_Handle->GPIO_pinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	795b      	ldrb	r3, [r3, #5]
 80003ee:	2b07      	cmp	r3, #7
 80003f0:	d115      	bne.n	800041e <GPIOx_Init+0x19a>
		{
			CLEAR_BIT(EXTI->RTSR, position);
 80003f2:	4b66      	ldr	r3, [pc, #408]	; (800058c <GPIOx_Init+0x308>)
 80003f4:	689b      	ldr	r3, [r3, #8]
 80003f6:	7ffa      	ldrb	r2, [r7, #31]
 80003f8:	2101      	movs	r1, #1
 80003fa:	fa01 f202 	lsl.w	r2, r1, r2
 80003fe:	43d2      	mvns	r2, r2
 8000400:	4611      	mov	r1, r2
 8000402:	4a62      	ldr	r2, [pc, #392]	; (800058c <GPIOx_Init+0x308>)
 8000404:	400b      	ands	r3, r1
 8000406:	6093      	str	r3, [r2, #8]
			SET_BIT(EXTI->FTSR, position);
 8000408:	4b60      	ldr	r3, [pc, #384]	; (800058c <GPIOx_Init+0x308>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	7ffa      	ldrb	r2, [r7, #31]
 800040e:	2101      	movs	r1, #1
 8000410:	fa01 f202 	lsl.w	r2, r1, r2
 8000414:	4611      	mov	r1, r2
 8000416:	4a5d      	ldr	r2, [pc, #372]	; (800058c <GPIOx_Init+0x308>)
 8000418:	430b      	orrs	r3, r1
 800041a:	60d3      	str	r3, [r2, #12]
 800041c:	e017      	b.n	800044e <GPIOx_Init+0x1ca>
		}
		else if (pGPIOx_Handle->GPIO_pinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	795b      	ldrb	r3, [r3, #5]
 8000422:	2b08      	cmp	r3, #8
 8000424:	d113      	bne.n	800044e <GPIOx_Init+0x1ca>
		{
			SET_BIT(EXTI->RTSR, position);
 8000426:	4b59      	ldr	r3, [pc, #356]	; (800058c <GPIOx_Init+0x308>)
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	7ffa      	ldrb	r2, [r7, #31]
 800042c:	2101      	movs	r1, #1
 800042e:	fa01 f202 	lsl.w	r2, r1, r2
 8000432:	4611      	mov	r1, r2
 8000434:	4a55      	ldr	r2, [pc, #340]	; (800058c <GPIOx_Init+0x308>)
 8000436:	430b      	orrs	r3, r1
 8000438:	6093      	str	r3, [r2, #8]
			SET_BIT(EXTI->FTSR, position);
 800043a:	4b54      	ldr	r3, [pc, #336]	; (800058c <GPIOx_Init+0x308>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	7ffa      	ldrb	r2, [r7, #31]
 8000440:	2101      	movs	r1, #1
 8000442:	fa01 f202 	lsl.w	r2, r1, r2
 8000446:	4611      	mov	r1, r2
 8000448:	4a50      	ldr	r2, [pc, #320]	; (800058c <GPIOx_Init+0x308>)
 800044a:	430b      	orrs	r3, r1
 800044c:	60d3      	str	r3, [r2, #12]
		}

		// Step 2: Control the port mapped to the EXTI interrupts.
		uint8_t portSelectVal = EXTI_PORT_SELECT_VAL(pGPIOx_Handle->pGPIOx); // Generate the code to select which port is connected to the EXTI line
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a4f      	ldr	r2, [pc, #316]	; (8000590 <GPIOx_Init+0x30c>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d02b      	beq.n	80004b0 <GPIOx_Init+0x22c>
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a4d      	ldr	r2, [pc, #308]	; (8000594 <GPIOx_Init+0x310>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d024      	beq.n	80004ac <GPIOx_Init+0x228>
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a4c      	ldr	r2, [pc, #304]	; (8000598 <GPIOx_Init+0x314>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d01d      	beq.n	80004a8 <GPIOx_Init+0x224>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a4a      	ldr	r2, [pc, #296]	; (800059c <GPIOx_Init+0x318>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d016      	beq.n	80004a4 <GPIOx_Init+0x220>
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a49      	ldr	r2, [pc, #292]	; (80005a0 <GPIOx_Init+0x31c>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d00f      	beq.n	80004a0 <GPIOx_Init+0x21c>
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a47      	ldr	r2, [pc, #284]	; (80005a4 <GPIOx_Init+0x320>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d008      	beq.n	800049c <GPIOx_Init+0x218>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a46      	ldr	r2, [pc, #280]	; (80005a8 <GPIOx_Init+0x324>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d101      	bne.n	8000498 <GPIOx_Init+0x214>
 8000494:	2306      	movs	r3, #6
 8000496:	e00c      	b.n	80004b2 <GPIOx_Init+0x22e>
 8000498:	2300      	movs	r3, #0
 800049a:	e00a      	b.n	80004b2 <GPIOx_Init+0x22e>
 800049c:	2305      	movs	r3, #5
 800049e:	e008      	b.n	80004b2 <GPIOx_Init+0x22e>
 80004a0:	2304      	movs	r3, #4
 80004a2:	e006      	b.n	80004b2 <GPIOx_Init+0x22e>
 80004a4:	2303      	movs	r3, #3
 80004a6:	e004      	b.n	80004b2 <GPIOx_Init+0x22e>
 80004a8:	2302      	movs	r3, #2
 80004aa:	e002      	b.n	80004b2 <GPIOx_Init+0x22e>
 80004ac:	2301      	movs	r3, #1
 80004ae:	e000      	b.n	80004b2 <GPIOx_Init+0x22e>
 80004b0:	2300      	movs	r3, #0
 80004b2:	777b      	strb	r3, [r7, #29]
		uint8_t EXTI_configOffset = (position % 4) * 4;
 80004b4:	7ffb      	ldrb	r3, [r7, #31]
 80004b6:	f003 0303 	and.w	r3, r3, #3
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	773b      	strb	r3, [r7, #28]
		__vo uint32_t *EXTI_configReg = NULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	623b      	str	r3, [r7, #32]
		switch (position / 4)
 80004c4:	7ffb      	ldrb	r3, [r7, #31]
 80004c6:	089b      	lsrs	r3, r3, #2
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	2b03      	cmp	r3, #3
 80004cc:	d816      	bhi.n	80004fc <GPIOx_Init+0x278>
 80004ce:	a201      	add	r2, pc, #4	; (adr r2, 80004d4 <GPIOx_Init+0x250>)
 80004d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d4:	080004e5 	.word	0x080004e5
 80004d8:	080004eb 	.word	0x080004eb
 80004dc:	080004f1 	.word	0x080004f1
 80004e0:	080004f7 	.word	0x080004f7
		{
			case 0:
				EXTI_configReg = &AFIO->EXTICR1;
 80004e4:	4b31      	ldr	r3, [pc, #196]	; (80005ac <GPIOx_Init+0x328>)
 80004e6:	623b      	str	r3, [r7, #32]
				break;
 80004e8:	e009      	b.n	80004fe <GPIOx_Init+0x27a>
			case 1:
				EXTI_configReg = &AFIO->EXTICR2;
 80004ea:	4b31      	ldr	r3, [pc, #196]	; (80005b0 <GPIOx_Init+0x32c>)
 80004ec:	623b      	str	r3, [r7, #32]
				break;
 80004ee:	e006      	b.n	80004fe <GPIOx_Init+0x27a>
			case 2:
				EXTI_configReg = &AFIO->EXTICR3;
 80004f0:	4b30      	ldr	r3, [pc, #192]	; (80005b4 <GPIOx_Init+0x330>)
 80004f2:	623b      	str	r3, [r7, #32]
				break;
 80004f4:	e003      	b.n	80004fe <GPIOx_Init+0x27a>
			case 3:
				EXTI_configReg = &AFIO->EXTICR4;
 80004f6:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <GPIOx_Init+0x334>)
 80004f8:	623b      	str	r3, [r7, #32]
				break;
 80004fa:	e000      	b.n	80004fe <GPIOx_Init+0x27a>
			default:
				break;
 80004fc:	bf00      	nop
		}
		AFIO_CLK_EN();
 80004fe:	4b2f      	ldr	r3, [pc, #188]	; (80005bc <GPIOx_Init+0x338>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	4a2e      	ldr	r2, [pc, #184]	; (80005bc <GPIOx_Init+0x338>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6193      	str	r3, [r2, #24]
		uint32_t clearMask = CLEAR_MASK_GEN(4) << EXTI_configOffset;
 800050a:	7f3b      	ldrb	r3, [r7, #28]
 800050c:	220f      	movs	r2, #15
 800050e:	fa02 f303 	lsl.w	r3, r2, r3
 8000512:	61bb      	str	r3, [r7, #24]
		MODIFY_REG(*EXTI_configReg, clearMask, portSelectVal << EXTI_configOffset);
 8000514:	6a3b      	ldr	r3, [r7, #32]
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	69bb      	ldr	r3, [r7, #24]
 800051a:	43db      	mvns	r3, r3
 800051c:	4013      	ands	r3, r2
 800051e:	7f79      	ldrb	r1, [r7, #29]
 8000520:	7f3a      	ldrb	r2, [r7, #28]
 8000522:	fa01 f202 	lsl.w	r2, r1, r2
 8000526:	431a      	orrs	r2, r3
 8000528:	6a3b      	ldr	r3, [r7, #32]
 800052a:	601a      	str	r2, [r3, #0]

		// Step 3: Enable the EXTI interrupts.
		SET_BIT(EXTI->IMR, position);
 800052c:	4b17      	ldr	r3, [pc, #92]	; (800058c <GPIOx_Init+0x308>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	7ffa      	ldrb	r2, [r7, #31]
 8000532:	2101      	movs	r1, #1
 8000534:	fa01 f202 	lsl.w	r2, r1, r2
 8000538:	4611      	mov	r1, r2
 800053a:	4a14      	ldr	r2, [pc, #80]	; (800058c <GPIOx_Init+0x308>)
 800053c:	430b      	orrs	r3, r1
 800053e:	6013      	str	r3, [r2, #0]
	}

	__vo uint32_t *configReg = (position < PIN_8) ? &pGPIOx_Handle->pGPIOx->CRL : &pGPIOx_Handle->pGPIOx->CRH;
 8000540:	7ffb      	ldrb	r3, [r7, #31]
 8000542:	2b07      	cmp	r3, #7
 8000544:	d802      	bhi.n	800054c <GPIOx_Init+0x2c8>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	e002      	b.n	8000552 <GPIOx_Init+0x2ce>
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3304      	adds	r3, #4
 8000552:	617b      	str	r3, [r7, #20]
	uint32_t config = (CNF << 2) | MODE;
 8000554:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000558:	009a      	lsls	r2, r3, #2
 800055a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800055e:	4313      	orrs	r3, r2
 8000560:	613b      	str	r3, [r7, #16]

	// Clear both CNFy and MODEy
	uint32_t clearMask = CLEAR_MASK_GEN(4) << configOffset;
 8000562:	7fbb      	ldrb	r3, [r7, #30]
 8000564:	220f      	movs	r2, #15
 8000566:	fa02 f303 	lsl.w	r3, r2, r3
 800056a:	60fb      	str	r3, [r7, #12]
	// Set CNFy and MODEy according to configuration
	MODIFY_REG(*configReg, clearMask, config << configOffset);
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	43db      	mvns	r3, r3
 8000574:	401a      	ands	r2, r3
 8000576:	7fbb      	ldrb	r3, [r7, #30]
 8000578:	6939      	ldr	r1, [r7, #16]
 800057a:	fa01 f303 	lsl.w	r3, r1, r3
 800057e:	431a      	orrs	r2, r3
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	601a      	str	r2, [r3, #0]
}
 8000584:	bf00      	nop
 8000586:	3728      	adds	r7, #40	; 0x28
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40010400 	.word	0x40010400
 8000590:	40010800 	.word	0x40010800
 8000594:	40010c00 	.word	0x40010c00
 8000598:	40011000 	.word	0x40011000
 800059c:	40011400 	.word	0x40011400
 80005a0:	40011800 	.word	0x40011800
 80005a4:	40011c00 	.word	0x40011c00
 80005a8:	40012000 	.word	0x40012000
 80005ac:	40010008 	.word	0x40010008
 80005b0:	4001000c 	.word	0x4001000c
 80005b4:	40010010 	.word	0x40010010
 80005b8:	40010014 	.word	0x40010014
 80005bc:	40021000 	.word	0x40021000

080005c0 <GPIOx_IsEXTI>:


/********** Interrupts control and handler **********/

uint8_t GPIOx_IsEXTI(uint8_t mode)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	return ((mode == GPIO_MODE_IT_RT) || (mode == GPIO_MODE_IT_FT) || (mode == GPIO_MODE_IT_RFT)) ? 1 : 0;
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2b06      	cmp	r3, #6
 80005ce:	d005      	beq.n	80005dc <GPIOx_IsEXTI+0x1c>
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2b07      	cmp	r3, #7
 80005d4:	d002      	beq.n	80005dc <GPIOx_IsEXTI+0x1c>
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b08      	cmp	r3, #8
 80005da:	d101      	bne.n	80005e0 <GPIOx_IsEXTI+0x20>
 80005dc:	2301      	movs	r3, #1
 80005de:	e000      	b.n	80005e2 <GPIOx_IsEXTI+0x22>
 80005e0:	2300      	movs	r3, #0
 80005e2:	b2db      	uxtb	r3, r3
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
	...

080005f0 <GPIOx_IRQControl>:

void GPIOx_IRQControl(uint8_t IRQ_Number, uint8_t enableState)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	460a      	mov	r2, r1
 80005fa:	71fb      	strb	r3, [r7, #7]
 80005fc:	4613      	mov	r3, r2
 80005fe:	71bb      	strb	r3, [r7, #6]
	uint8_t NVIC_regNum = IRQ_Number / 32;
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	095b      	lsrs	r3, r3, #5
 8000604:	72fb      	strb	r3, [r7, #11]
	uint8_t NVIC_configOffset = IRQ_Number % 32;
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f003 031f 	and.w	r3, r3, #31
 800060c:	72bb      	strb	r3, [r7, #10]

	__vo uint32_t *configReg = NULL;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]

	if (enableState == ENABLE)
 8000612:	79bb      	ldrb	r3, [r7, #6]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d10c      	bne.n	8000632 <GPIOx_IRQControl+0x42>
	{
		configReg = (NVIC_regNum == 0) ? NVIC_ISER0 :
 8000618:	7afb      	ldrb	r3, [r7, #11]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d006      	beq.n	800062c <GPIOx_IRQControl+0x3c>
					(NVIC_regNum == 1) ? NVIC_ISER1 : NULL;
 800061e:	7afb      	ldrb	r3, [r7, #11]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d101      	bne.n	8000628 <GPIOx_IRQControl+0x38>
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <GPIOx_IRQControl+0x7c>)
 8000626:	e002      	b.n	800062e <GPIOx_IRQControl+0x3e>
 8000628:	2300      	movs	r3, #0
 800062a:	e000      	b.n	800062e <GPIOx_IRQControl+0x3e>
		configReg = (NVIC_regNum == 0) ? NVIC_ISER0 :
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <GPIOx_IRQControl+0x80>)
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	e00e      	b.n	8000650 <GPIOx_IRQControl+0x60>
	}
	else if (enableState == DISABLE)
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d10b      	bne.n	8000650 <GPIOx_IRQControl+0x60>
	{
		configReg = (NVIC_regNum == 0) ? NVIC_ICER0 :
 8000638:	7afb      	ldrb	r3, [r7, #11]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d006      	beq.n	800064c <GPIOx_IRQControl+0x5c>
					(NVIC_regNum == 1) ? NVIC_ICER1 : NULL;
 800063e:	7afb      	ldrb	r3, [r7, #11]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d101      	bne.n	8000648 <GPIOx_IRQControl+0x58>
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <GPIOx_IRQControl+0x84>)
 8000646:	e002      	b.n	800064e <GPIOx_IRQControl+0x5e>
 8000648:	2300      	movs	r3, #0
 800064a:	e000      	b.n	800064e <GPIOx_IRQControl+0x5e>
		configReg = (NVIC_regNum == 0) ? NVIC_ICER0 :
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <GPIOx_IRQControl+0x88>)
 800064e:	60fb      	str	r3, [r7, #12]
	}

	/* Mask or un-mask an interrupt */
	SET_BIT(*configReg, NVIC_configOffset);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	7aba      	ldrb	r2, [r7, #10]
 8000656:	2101      	movs	r1, #1
 8000658:	fa01 f202 	lsl.w	r2, r1, r2
 800065c:	431a      	orrs	r2, r3
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	601a      	str	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	e000e104 	.word	0xe000e104
 8000670:	e000e100 	.word	0xe000e100
 8000674:	e000e184 	.word	0xe000e184
 8000678:	e000e180 	.word	0xe000e180

0800067c <GPIOx_IRQHandler>:

	MODIFY_REG(*(NVIC_IPRx_BASEADDR + Priority_regNum), clearMask, IRQ_Priority << Priority_configOffset);
}

void GPIOx_IRQHandler(uint8_t pinNumber)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
	// Clear the pending bit in the EXTI peripheral.
	if ( ((EXTI->PR >> pinNumber) & 1) == 1 )
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <GPIOx_IRQHandler+0x3c>)
 8000688:	695a      	ldr	r2, [r3, #20]
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	fa22 f303 	lsr.w	r3, r2, r3
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b01      	cmp	r3, #1
 8000696:	d109      	bne.n	80006ac <GPIOx_IRQHandler+0x30>
	{
		SET_BIT(EXTI->PR, pinNumber);
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <GPIOx_IRQHandler+0x3c>)
 800069a:	695b      	ldr	r3, [r3, #20]
 800069c:	79fa      	ldrb	r2, [r7, #7]
 800069e:	2101      	movs	r1, #1
 80006a0:	fa01 f202 	lsl.w	r2, r1, r2
 80006a4:	4611      	mov	r1, r2
 80006a6:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <GPIOx_IRQHandler+0x3c>)
 80006a8:	430b      	orrs	r3, r1
 80006aa:	6153      	str	r3, [r2, #20]
	}
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40010400 	.word	0x40010400

080006bc <SPIx_ClkControl>:
#include "stm32f1xx_spi.h"

/********** SPIx clock control **********/

void SPIx_ClkControl(SPIx_Reg_t *pSPIx, uint8_t enableState)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	70fb      	strb	r3, [r7, #3]
	if (enableState == ENABLE)
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d120      	bne.n	8000710 <SPIx_ClkControl+0x54>
	{
		if (pSPIx == SPI1)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a23      	ldr	r2, [pc, #140]	; (8000760 <SPIx_ClkControl+0xa4>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d106      	bne.n	80006e4 <SPIx_ClkControl+0x28>
		{
			SPI1_CLK_EN();
 80006d6:	4b23      	ldr	r3, [pc, #140]	; (8000764 <SPIx_ClkControl+0xa8>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	4a22      	ldr	r2, [pc, #136]	; (8000764 <SPIx_ClkControl+0xa8>)
 80006dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006e0:	6193      	str	r3, [r2, #24]
		else if (pSPIx == SPI3)
		{
			SPI3_CLK_DI();
		}
	}
}
 80006e2:	e038      	b.n	8000756 <SPIx_ClkControl+0x9a>
		else if (pSPIx == SPI2)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4a20      	ldr	r2, [pc, #128]	; (8000768 <SPIx_ClkControl+0xac>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d106      	bne.n	80006fa <SPIx_ClkControl+0x3e>
			SPI2_CLK_EN();
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <SPIx_ClkControl+0xa8>)
 80006ee:	69db      	ldr	r3, [r3, #28]
 80006f0:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <SPIx_ClkControl+0xa8>)
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f6:	61d3      	str	r3, [r2, #28]
}
 80006f8:	e02d      	b.n	8000756 <SPIx_ClkControl+0x9a>
		else if (pSPIx == SPI3)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a1b      	ldr	r2, [pc, #108]	; (800076c <SPIx_ClkControl+0xb0>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d129      	bne.n	8000756 <SPIx_ClkControl+0x9a>
			SPI3_CLK_EN();
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <SPIx_ClkControl+0xa8>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a17      	ldr	r2, [pc, #92]	; (8000764 <SPIx_ClkControl+0xa8>)
 8000708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800070c:	61d3      	str	r3, [r2, #28]
}
 800070e:	e022      	b.n	8000756 <SPIx_ClkControl+0x9a>
	else if (enableState == DISABLE)
 8000710:	78fb      	ldrb	r3, [r7, #3]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d11f      	bne.n	8000756 <SPIx_ClkControl+0x9a>
		if (pSPIx == SPI1)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a11      	ldr	r2, [pc, #68]	; (8000760 <SPIx_ClkControl+0xa4>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d106      	bne.n	800072c <SPIx_ClkControl+0x70>
			SPI1_CLK_DI();
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <SPIx_ClkControl+0xa8>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4a10      	ldr	r2, [pc, #64]	; (8000764 <SPIx_ClkControl+0xa8>)
 8000724:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000728:	6193      	str	r3, [r2, #24]
}
 800072a:	e014      	b.n	8000756 <SPIx_ClkControl+0x9a>
		else if (pSPIx == SPI2)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <SPIx_ClkControl+0xac>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d106      	bne.n	8000742 <SPIx_ClkControl+0x86>
			SPI2_CLK_DI();
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <SPIx_ClkControl+0xa8>)
 8000736:	69db      	ldr	r3, [r3, #28]
 8000738:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <SPIx_ClkControl+0xa8>)
 800073a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800073e:	61d3      	str	r3, [r2, #28]
}
 8000740:	e009      	b.n	8000756 <SPIx_ClkControl+0x9a>
		else if (pSPIx == SPI3)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a09      	ldr	r2, [pc, #36]	; (800076c <SPIx_ClkControl+0xb0>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d105      	bne.n	8000756 <SPIx_ClkControl+0x9a>
			SPI3_CLK_DI();
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <SPIx_ClkControl+0xa8>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a05      	ldr	r2, [pc, #20]	; (8000764 <SPIx_ClkControl+0xa8>)
 8000750:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000754:	61d3      	str	r3, [r2, #28]
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	40013000 	.word	0x40013000
 8000764:	40021000 	.word	0x40021000
 8000768:	40003800 	.word	0x40003800
 800076c:	40003c00 	.word	0x40003c00

08000770 <SPIx_Init>:


/********** SPIx init & denit **********/

void SPIx_Init(SPIx_Handle_t *pSPIx_Handle)
{
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	; 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	SPIx_Reg_t *pSPIx = pSPIx_Handle->pSPIx;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	61fb      	str	r3, [r7, #28]
	SPIx_Config_t config = pSPIx_Handle->SPI_config;
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	3204      	adds	r2, #4
 8000786:	e892 0003 	ldmia.w	r2, {r0, r1}
 800078a:	e883 0003 	stmia.w	r3, {r0, r1}

	// 1. Control the peripheral mode
	WRITE_BIT(pSPIx->CR1, config.SPI_Mode, 2);
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f023 0304 	bic.w	r3, r3, #4
 8000796:	69fa      	ldr	r2, [r7, #28]
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	7b3a      	ldrb	r2, [r7, #12]
 800079c:	0092      	lsls	r2, r2, #2
 800079e:	431a      	orrs	r2, r3
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	601a      	str	r2, [r3, #0]

	// 2. Set the bus mode
	if (config.SPI_BusMode == SPI_BUSMODE_FULLDUPLEX)
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d106      	bne.n	80007b8 <SPIx_Init+0x48>
	{
		// TODO: Implement with BIDIMODE = 0 and D
		CLEAR_BIT(pSPIx->CR1, 15);
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	e02e      	b.n	8000816 <SPIx_Init+0xa6>
	}
	else if (config.SPI_BusMode == SPI_BUSMODE_HALFDUPLEX)
 80007b8:	7b7b      	ldrb	r3, [r7, #13]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d10c      	bne.n	80007d8 <SPIx_Init+0x68>
	{
		// TODO: Implement with BIDIMODE = 1 and BIDIOE = 1
		SET_BIT(pSPIx->CR1, 15);
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	601a      	str	r2, [r3, #0]
		SET_BIT(pSPIx->CR1, 14);
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	e01e      	b.n	8000816 <SPIx_Init+0xa6>
	}
	else if (config.SPI_BusMode == SPI_BUSMODE_SIMPLEX_RX)
 80007d8:	7b7b      	ldrb	r3, [r7, #13]
 80007da:	2b03      	cmp	r3, #3
 80007dc:	d10c      	bne.n	80007f8 <SPIx_Init+0x88>
	{
		// TODO: Implement with BIDIMODE = 0 and RXONLY = 1
		CLEAR_BIT(pSPIx->CR1, 15);
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	601a      	str	r2, [r3, #0]
		SET_BIT(pSPIx->CR1, 10);
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	e00e      	b.n	8000816 <SPIx_Init+0xa6>
	}
	else if (config.SPI_BusMode == SPI_BUSMODE_SIMPLEX_TX)
 80007f8:	7b7b      	ldrb	r3, [r7, #13]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d10b      	bne.n	8000816 <SPIx_Init+0xa6>
	{
		// TODO: Implement with BIDIMODE = 0 and RXONLY = 0
		CLEAR_BIT(pSPIx->CR1, 15);
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	601a      	str	r2, [r3, #0]
		CLEAR_BIT(pSPIx->CR1, 10);
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	601a      	str	r2, [r3, #0]
	}

	// 3. Set the SPI speed division coefficient of SCLK
	if (config.SPI_Mode == SPI_MODE_MASTER)
 8000816:	7b3b      	ldrb	r3, [r7, #12]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d10b      	bne.n	8000834 <SPIx_Init+0xc4>
	{
		uint32_t clearMask = CLEAR_MASK_GEN(3) << 3;
 800081c:	2338      	movs	r3, #56	; 0x38
 800081e:	61bb      	str	r3, [r7, #24]
		MODIFY_REG(pSPIx->CR1, clearMask, config.SPI_Speed << 3);
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	43db      	mvns	r3, r3
 8000828:	4013      	ands	r3, r2
 800082a:	7bba      	ldrb	r2, [r7, #14]
 800082c:	00d2      	lsls	r2, r2, #3
 800082e:	431a      	orrs	r2, r3
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	601a      	str	r2, [r3, #0]
	}

	// 4. Set the mode using CPOL and CPHA
	uint8_t CPHA = (config.SPI_CLKMode >> 0) & 1;
 8000834:	7c7b      	ldrb	r3, [r7, #17]
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	75fb      	strb	r3, [r7, #23]
	uint8_t CPOL = (config.SPI_CLKMode >> 1) & 1;
 800083c:	7c7b      	ldrb	r3, [r7, #17]
 800083e:	085b      	lsrs	r3, r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	75bb      	strb	r3, [r7, #22]
	WRITE_BIT(pSPIx->CR1, CPHA, 0);
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f023 0301 	bic.w	r3, r3, #1
 8000850:	69fa      	ldr	r2, [r7, #28]
 8000852:	6013      	str	r3, [r2, #0]
 8000854:	7dfa      	ldrb	r2, [r7, #23]
 8000856:	431a      	orrs	r2, r3
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	601a      	str	r2, [r3, #0]
	WRITE_BIT(pSPIx->CR1, CPOL, 1);
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f023 0302 	bic.w	r3, r3, #2
 8000864:	69fa      	ldr	r2, [r7, #28]
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	7dba      	ldrb	r2, [r7, #22]
 800086a:	0052      	lsls	r2, r2, #1
 800086c:	431a      	orrs	r2, r3
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	601a      	str	r2, [r3, #0]

	// 5. Set the data frame format
	WRITE_BIT(pSPIx->CR1, config.SPI_DFF, 11);
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800087a:	69fa      	ldr	r2, [r7, #28]
 800087c:	6013      	str	r3, [r2, #0]
 800087e:	7bfa      	ldrb	r2, [r7, #15]
 8000880:	02d2      	lsls	r2, r2, #11
 8000882:	431a      	orrs	r2, r3
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	601a      	str	r2, [r3, #0]

	// 6. Set the bit direction
	WRITE_BIT(pSPIx->CR1, config.SPI_DataDirection, 7);
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000890:	69fa      	ldr	r2, [r7, #28]
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	7c3a      	ldrb	r2, [r7, #16]
 8000896:	01d2      	lsls	r2, r2, #7
 8000898:	431a      	orrs	r2, r3
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	601a      	str	r2, [r3, #0]

	//7. Control the NSS pin
	if (config.SPI_SSM == SPI_SSM_HARDWARE)
 800089e:	7cfb      	ldrb	r3, [r7, #19]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d111      	bne.n	80008c8 <SPIx_Init+0x158>
	{
		CLEAR_BIT(pSPIx->CR1, 9);
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	601a      	str	r2, [r3, #0]
		WRITE_BIT(pSPIx->CR2, config.SPI_MultiMaster, 2);
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	f023 0304 	bic.w	r3, r3, #4
 80008b8:	69fa      	ldr	r2, [r7, #28]
 80008ba:	6053      	str	r3, [r2, #4]
 80008bc:	7cba      	ldrb	r2, [r7, #18]
 80008be:	0092      	lsls	r2, r2, #2
 80008c0:	431a      	orrs	r2, r3
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	605a      	str	r2, [r3, #4]
	else if (config.SPI_SSM == SPI_SSM_SOFTWARE)
	{
		SET_BIT(pSPIx->CR1, 9);
		WRITE_BIT(pSPIx->CR1, ~config.SPI_Mode, 8);
	}
}
 80008c6:	e014      	b.n	80008f2 <SPIx_Init+0x182>
	else if (config.SPI_SSM == SPI_SSM_SOFTWARE)
 80008c8:	7cfb      	ldrb	r3, [r7, #19]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d111      	bne.n	80008f2 <SPIx_Init+0x182>
		SET_BIT(pSPIx->CR1, 9);
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	601a      	str	r2, [r3, #0]
		WRITE_BIT(pSPIx->CR1, ~config.SPI_Mode, 8);
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008e2:	69fa      	ldr	r2, [r7, #28]
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	7b3a      	ldrb	r2, [r7, #12]
 80008e8:	43d2      	mvns	r2, r2
 80008ea:	0212      	lsls	r2, r2, #8
 80008ec:	431a      	orrs	r2, r3
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	601a      	str	r2, [r3, #0]
}
 80008f2:	bf00      	nop
 80008f4:	3724      	adds	r7, #36	; 0x24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <SPIx_GetFlag>:
	SET_BIT(RCC->APB1RSTR, rstBit);
	CLEAR_BIT(RCC->APB1RSTR, rstBit);
}

uint8_t SPIx_GetFlag(SPIx_Reg_t *pSPIx, uint8_t flag)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	460b      	mov	r3, r1
 8000906:	70fb      	strb	r3, [r7, #3]
	if (((pSPIx->SR >> flag) & 1) == FLAG_SET)	return FLAG_SET;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689a      	ldr	r2, [r3, #8]
 800090c:	78fb      	ldrb	r3, [r7, #3]
 800090e:	fa22 f303 	lsr.w	r3, r2, r3
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	2b01      	cmp	r3, #1
 8000918:	d101      	bne.n	800091e <SPIx_GetFlag+0x22>
 800091a:	2301      	movs	r3, #1
 800091c:	e000      	b.n	8000920 <SPIx_GetFlag+0x24>
	else return FLAG_CLEAR;
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <SPIx_Start>:


/********** Data transfer & receive **********/

void SPIx_Start(SPIx_Reg_t *pSPIx)
{
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
	SET_BIT(pSPIx->CR1, 6);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	601a      	str	r2, [r3, #0]
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <SPIx_Stop>:

void SPIx_Stop(SPIx_Reg_t *pSPIx)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(pSPIx->CR1, 6);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	601a      	str	r2, [r3, #0]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr

08000966 <SPIx_Send>:

void SPIx_Send(SPIx_Reg_t *pSPIx, uint8_t *pTxBuffer, uint32_t dataLen)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b086      	sub	sp, #24
 800096a:	af00      	add	r7, sp, #0
 800096c:	60f8      	str	r0, [r7, #12]
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
	/* Everytime the Data Register is written, the MCU sends its value to the TxBuffer.
	 * Data transmission starts once Tx is written, after this the Tx_Empty flag is set.
	 * The SPI_SR_BSY flag is set when the peripheral is busy, or the Tx is not empty.
	 */
	const uint8_t DFF = READ_BIT(pSPIx->CR1, 11); // 1 for 16-bit, 0 for 8-bit
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2300      	movs	r3, #0
 8000978:	75fb      	strb	r3, [r7, #23]

	while (dataLen > 0)
 800097a:	e020      	b.n	80009be <SPIx_Send+0x58>
	{
		// Wait until the Tx buffer is empty (TXE is set).
		while (SPIx_GetFlag(pSPIx, SPI_FLAG_TXE) != FLAG_SET);
 800097c:	bf00      	nop
 800097e:	2101      	movs	r1, #1
 8000980:	68f8      	ldr	r0, [r7, #12]
 8000982:	f7ff ffbb 	bl	80008fc <SPIx_GetFlag>
 8000986:	4603      	mov	r3, r0
 8000988:	2b01      	cmp	r3, #1
 800098a:	d1f8      	bne.n	800097e <SPIx_Send+0x18>

		if (DFF == 1)
 800098c:	7dfb      	ldrb	r3, [r7, #23]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d105      	bne.n	800099e <SPIx_Send+0x38>
		{
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	e004      	b.n	80009a8 <SPIx_Send+0x42>
		}
		else
		{
			pSPIx->DR = *pTxBuffer;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	461a      	mov	r2, r3
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	60da      	str	r2, [r3, #12]
		}

		dataLen -= (1+DFF);
 80009a8:	7dfb      	ldrb	r3, [r7, #23]
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	3b01      	subs	r3, #1
 80009b0:	607b      	str	r3, [r7, #4]
		pTxBuffer += (1+DFF);
 80009b2:	7dfb      	ldrb	r3, [r7, #23]
 80009b4:	3301      	adds	r3, #1
 80009b6:	461a      	mov	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4413      	add	r3, r2
 80009bc:	60bb      	str	r3, [r7, #8]
	while (dataLen > 0)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d1db      	bne.n	800097c <SPIx_Send+0x16>
	}

	// Wait until the end of transfer (TXE is set and BSY is cleared)
	while ((SPIx_GetFlag(pSPIx, SPI_FLAG_TXE) != FLAG_SET) && (SPIx_GetFlag(pSPIx, SPI_FLAG_BSY) != FLAG_CLEAR));
 80009c4:	bf00      	nop
 80009c6:	2101      	movs	r1, #1
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f7ff ff97 	bl	80008fc <SPIx_GetFlag>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d006      	beq.n	80009e2 <SPIx_Send+0x7c>
 80009d4:	2107      	movs	r1, #7
 80009d6:	68f8      	ldr	r0, [r7, #12]
 80009d8:	f7ff ff90 	bl	80008fc <SPIx_GetFlag>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1f1      	bne.n	80009c6 <SPIx_Send+0x60>
}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <SPIx_Receive>:

void SPIx_Receive(SPIx_Reg_t *pSPIx, uint8_t *pRxBuffer, uint32_t dataLen)
{
 80009ea:	b590      	push	{r4, r7, lr}
 80009ec:	b087      	sub	sp, #28
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	60f8      	str	r0, [r7, #12]
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
	uint8_t DFF = READ_BIT(pSPIx->CR1, 11);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2300      	movs	r3, #0
 80009fc:	75fb      	strb	r3, [r7, #23]

	while (dataLen > 0)
 80009fe:	e031      	b.n	8000a64 <SPIx_Receive+0x7a>
	{
		while ( (SPIx_GetFlag(pSPIx, SPI_FLAG_BSY) == FLAG_SET) & (SPIx_GetFlag(pSPIx, SPI_FLAG_RXNE) != FLAG_SET) );
 8000a00:	bf00      	nop
 8000a02:	2107      	movs	r1, #7
 8000a04:	68f8      	ldr	r0, [r7, #12]
 8000a06:	f7ff ff79 	bl	80008fc <SPIx_GetFlag>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	2301      	moveq	r3, #1
 8000a12:	2300      	movne	r3, #0
 8000a14:	b2dc      	uxtb	r4, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f7ff ff6f 	bl	80008fc <SPIx_GetFlag>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	bf14      	ite	ne
 8000a24:	2301      	movne	r3, #1
 8000a26:	2300      	moveq	r3, #0
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	4023      	ands	r3, r4
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1e7      	bne.n	8000a02 <SPIx_Receive+0x18>

		if (DFF == 1)
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d105      	bne.n	8000a44 <SPIx_Receive+0x5a>
		{
			*pRxBuffer = pSPIx->DR;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	701a      	strb	r2, [r3, #0]
 8000a42:	e004      	b.n	8000a4e <SPIx_Receive+0x64>
		}
		else
		{
			*pRxBuffer = pSPIx->DR;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	701a      	strb	r2, [r3, #0]
		}

		dataLen -= (1+DFF);
 8000a4e:	7dfb      	ldrb	r3, [r7, #23]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	3b01      	subs	r3, #1
 8000a56:	607b      	str	r3, [r7, #4]
		pRxBuffer += (1+DFF);
 8000a58:	7dfb      	ldrb	r3, [r7, #23]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	4413      	add	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
	while (dataLen > 0)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1ca      	bne.n	8000a00 <SPIx_Receive+0x16>
	}
}
 8000a6a:	bf00      	nop
 8000a6c:	bf00      	nop
 8000a6e:	371c      	adds	r7, #28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd90      	pop	{r4, r7, pc}

08000a74 <main>:

void GPIO_Setup(void);
void SPI_Setup(SPIx_Handle_t *hspi);

int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
	GPIO_Setup();
 8000a7a:	f000 f84d 	bl	8000b18 <GPIO_Setup>
	SPI_Setup(&hspi2);
 8000a7e:	481d      	ldr	r0, [pc, #116]	; (8000af4 <main+0x80>)
 8000a80:	f000 f898 	bl	8000bb4 <SPI_Setup>

	uint8_t *command = cmdArr;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <main+0x84>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	607b      	str	r3, [r7, #4]
	uint8_t sensorVal = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	70fb      	strb	r3, [r7, #3]
	uint8_t ledVal = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	70bb      	strb	r3, [r7, #2]
	uint8_t ackBit = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	707b      	strb	r3, [r7, #1]

	while (1)
	{
		if (buttonPressed)
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <main+0x88>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0fb      	beq.n	8000a96 <main+0x22>
		{
			SPIx_Start(hspi2.pSPIx);
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <main+0x80>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ff41 	bl	800092a <SPIx_Start>
			SPIx_Send(hspi2.pSPIx, command, 1);
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <main+0x80>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2201      	movs	r2, #1
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff58 	bl	8000966 <SPIx_Send>
			SPIx_Receive(hspi2.pSPIx, &ackBit, 1);
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <main+0x80>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	1c79      	adds	r1, r7, #1
 8000abc:	2201      	movs	r2, #1
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff93 	bl	80009ea <SPIx_Receive>
			SPIx_Stop(hspi2.pSPIx);
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <main+0x80>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff3d 	bl	8000948 <SPIx_Stop>

			if (ackBit == ACK)
 8000ace:	787b      	ldrb	r3, [r7, #1]
 8000ad0:	2bf5      	cmp	r3, #245	; 0xf5
 8000ad2:	d1e0      	bne.n	8000a96 <main+0x22>
			{
				if (*command == CMD_LED_CTRL)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b50      	cmp	r3, #80	; 0x50
 8000ada:	d0dc      	beq.n	8000a96 <main+0x22>
				{
					//TODO: Implementation
				}
				else if (*command == CMD_SENSOR_READ)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b51      	cmp	r3, #81	; 0x51
 8000ae2:	d0d8      	beq.n	8000a96 <main+0x22>
				{
					//TODO: Implementation
				}
				else if (*command == CMD_LED_READ)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b52      	cmp	r3, #82	; 0x52
 8000aea:	d0d4      	beq.n	8000a96 <main+0x22>
				{
					//TODO: Implementation
				}
				else if (*command == CMD_PRINT)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b53      	cmp	r3, #83	; 0x53
		if (buttonPressed)
 8000af2:	e7d0      	b.n	8000a96 <main+0x22>
 8000af4:	20000020 	.word	0x20000020
 8000af8:	20000000 	.word	0x20000000
 8000afc:	2000002c 	.word	0x2000002c

08000b00 <EXTI1_IRQHandler>:
	}

}

void EXTI1_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	GPIOx_IRQHandler(PIN_1);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f7ff fdb9 	bl	800067c <GPIOx_IRQHandler>
	buttonPressed = 1;
 8000b0a:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <EXTI1_IRQHandler+0x14>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000002c 	.word	0x2000002c

08000b18 <GPIO_Setup>:


void GPIO_Setup(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
	GPIOx_ClkControl(GPIOB, ENABLE);
 8000b1e:	2101      	movs	r1, #1
 8000b20:	4823      	ldr	r0, [pc, #140]	; (8000bb0 <GPIO_Setup+0x98>)
 8000b22:	f7ff fb25 	bl	8000170 <GPIOx_ClkControl>

	/*** Set up the button pin ***/
	GPIOx_Handle_t btnHandler;
	memset(&btnHandler, 0, sizeof(btnHandler));
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f895 	bl	8000c5e <memset>
	btnHandler.pGPIOx = GPIOB;
 8000b34:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <GPIO_Setup+0x98>)
 8000b36:	60bb      	str	r3, [r7, #8]
	btnHandler.GPIO_pinConfig.GPIO_PinNum = PIN_1;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	733b      	strb	r3, [r7, #12]
	btnHandler.GPIO_pinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000b3c:	2307      	movs	r3, #7
 8000b3e:	737b      	strb	r3, [r7, #13]
	btnHandler.GPIO_pinConfig.GPIO_PinPull = GPIO_PULLUP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	73fb      	strb	r3, [r7, #15]
	GPIOx_Init(&btnHandler);
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fb9b 	bl	8000284 <GPIOx_Init>
	GPIOx_IRQControl(IRQ_NO_EXTI1, ENABLE);
 8000b4e:	2101      	movs	r1, #1
 8000b50:	2007      	movs	r0, #7
 8000b52:	f7ff fd4d 	bl	80005f0 <GPIOx_IRQControl>

	/*** Set up the SPI peripheral pins ***/
	GPIOx_Handle_t spiPinHandler;
	memset(&spiPinHandler, 0, sizeof(spiPinHandler));
 8000b56:	463b      	mov	r3, r7
 8000b58:	2208      	movs	r2, #8
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 f87e 	bl	8000c5e <memset>
	// MOSI
	spiPinHandler.pGPIOx = GPIOB;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <GPIO_Setup+0x98>)
 8000b64:	603b      	str	r3, [r7, #0]
	spiPinHandler.GPIO_pinConfig.GPIO_PinNum = PIN_15;
 8000b66:	230f      	movs	r3, #15
 8000b68:	713b      	strb	r3, [r7, #4]
	spiPinHandler.GPIO_pinConfig.GPIO_PinMode = GPIO_MODE_AF_OP_PP;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	717b      	strb	r3, [r7, #5]
	spiPinHandler.GPIO_pinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	71bb      	strb	r3, [r7, #6]
	GPIOx_Init(&spiPinHandler);
 8000b72:	463b      	mov	r3, r7
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fb85 	bl	8000284 <GPIOx_Init>
	// SCLK
	spiPinHandler.GPIO_pinConfig.GPIO_PinNum = PIN_13;
 8000b7a:	230d      	movs	r3, #13
 8000b7c:	713b      	strb	r3, [r7, #4]
	GPIOx_Init(&spiPinHandler);
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fb7f 	bl	8000284 <GPIOx_Init>
	// NSS
	spiPinHandler.GPIO_pinConfig.GPIO_PinNum = PIN_12;
 8000b86:	230c      	movs	r3, #12
 8000b88:	713b      	strb	r3, [r7, #4]
	GPIOx_Init(&spiPinHandler);
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fb79 	bl	8000284 <GPIOx_Init>
	// MISO
	spiPinHandler.GPIO_pinConfig.GPIO_PinNum = PIN_14;
 8000b92:	230e      	movs	r3, #14
 8000b94:	713b      	strb	r3, [r7, #4]
	spiPinHandler.GPIO_pinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	717b      	strb	r3, [r7, #5]
	spiPinHandler.GPIO_pinConfig.GPIO_PinPull = GPIO_PULLUP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	71fb      	strb	r3, [r7, #7]
	GPIOx_Init(&spiPinHandler);
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fb6f 	bl	8000284 <GPIOx_Init>
}
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40010c00 	.word	0x40010c00

08000bb4 <SPI_Setup>:

void SPI_Setup(SPIx_Handle_t *hspi)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	hspi->pSPIx = SPI2;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <SPI_Setup+0x54>)
 8000bc0:	601a      	str	r2, [r3, #0]
	SPIx_ClkControl(hspi->pSPIx, ENABLE);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fd77 	bl	80006bc <SPIx_ClkControl>
	hspi->SPI_config.SPI_Mode = SPI_MODE_MASTER;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	711a      	strb	r2, [r3, #4]
	hspi->SPI_config.SPI_BusMode = SPI_BUSMODE_FULLDUPLEX;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	715a      	strb	r2, [r3, #5]
	hspi->SPI_config.SPI_Speed = SPI_SPEED_DIV8;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2202      	movs	r2, #2
 8000bde:	719a      	strb	r2, [r3, #6]
	hspi->SPI_config.SPI_DFF = SPI_DFF_8BITS;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	71da      	strb	r2, [r3, #7]
	hspi->SPI_config.SPI_CLKMode = SPI_CLK_MODE_0;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	725a      	strb	r2, [r3, #9]
	hspi->SPI_config.SPI_MultiMaster = SPI_MM_DISABLE;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	729a      	strb	r2, [r3, #10]
	hspi->SPI_config.SPI_SSM = SPI_SSM_HARDWARE;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	72da      	strb	r2, [r3, #11]
	SPIx_Init(hspi);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff fdb9 	bl	8000770 <SPIx_Init>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40003800 	.word	0x40003800

08000c0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c16:	490d      	ldr	r1, [pc, #52]	; (8000c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <LoopForever+0xe>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	; (8000c58 <LoopForever+0x16>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c3a:	f000 f819 	bl	8000c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3e:	f7ff ff19 	bl	8000a74 <main>

08000c42 <LoopForever>:

LoopForever:
  b LoopForever
 8000c42:	e7fe      	b.n	8000c42 <LoopForever>
  ldr   r0, =_estack
 8000c44:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000c50:	08000cd8 	.word	0x08000cd8
  ldr r2, =_sbss
 8000c54:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000c58:	20000030 	.word	0x20000030

08000c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC1_2_IRQHandler>

08000c5e <memset>:
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4402      	add	r2, r0
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d100      	bne.n	8000c68 <memset+0xa>
 8000c66:	4770      	bx	lr
 8000c68:	f803 1b01 	strb.w	r1, [r3], #1
 8000c6c:	e7f9      	b.n	8000c62 <memset+0x4>
	...

08000c70 <__libc_init_array>:
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	2600      	movs	r6, #0
 8000c74:	4d0c      	ldr	r5, [pc, #48]	; (8000ca8 <__libc_init_array+0x38>)
 8000c76:	4c0d      	ldr	r4, [pc, #52]	; (8000cac <__libc_init_array+0x3c>)
 8000c78:	1b64      	subs	r4, r4, r5
 8000c7a:	10a4      	asrs	r4, r4, #2
 8000c7c:	42a6      	cmp	r6, r4
 8000c7e:	d109      	bne.n	8000c94 <__libc_init_array+0x24>
 8000c80:	f000 f81a 	bl	8000cb8 <_init>
 8000c84:	2600      	movs	r6, #0
 8000c86:	4d0a      	ldr	r5, [pc, #40]	; (8000cb0 <__libc_init_array+0x40>)
 8000c88:	4c0a      	ldr	r4, [pc, #40]	; (8000cb4 <__libc_init_array+0x44>)
 8000c8a:	1b64      	subs	r4, r4, r5
 8000c8c:	10a4      	asrs	r4, r4, #2
 8000c8e:	42a6      	cmp	r6, r4
 8000c90:	d105      	bne.n	8000c9e <__libc_init_array+0x2e>
 8000c92:	bd70      	pop	{r4, r5, r6, pc}
 8000c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c98:	4798      	blx	r3
 8000c9a:	3601      	adds	r6, #1
 8000c9c:	e7ee      	b.n	8000c7c <__libc_init_array+0xc>
 8000c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ca2:	4798      	blx	r3
 8000ca4:	3601      	adds	r6, #1
 8000ca6:	e7f2      	b.n	8000c8e <__libc_init_array+0x1e>
 8000ca8:	08000cd0 	.word	0x08000cd0
 8000cac:	08000cd0 	.word	0x08000cd0
 8000cb0:	08000cd0 	.word	0x08000cd0
 8000cb4:	08000cd4 	.word	0x08000cd4

08000cb8 <_init>:
 8000cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cba:	bf00      	nop
 8000cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cbe:	bc08      	pop	{r3}
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	4770      	bx	lr

08000cc4 <_fini>:
 8000cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc6:	bf00      	nop
 8000cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cca:	bc08      	pop	{r3}
 8000ccc:	469e      	mov	lr, r3
 8000cce:	4770      	bx	lr
